import pandas as pd
import scipy.stats as st
import matplotlib.pyplot as plt

# Шаг 1
# Загрузка данных из файла в датафрейм
data = pd.read_csv('games.csv', sep=',')

# Шаг 2 Обработка датасета
# Приведение названий столбцов к нижнему регистру
data.columns = data.columns.str.lower()
# Поиск дубликатов
dupl = data.duplicated(subset=['name', 'platform'])
'''
Было найдено только несколько НЕЯВНЫХ дубликатов. В данном контексте мы не имеем право их удалить, т.к.
в столбце 'name' повторяется только название серии игры. Соответственно, разные части одной серии считаем
за разные игры
'''

# Шаг 3 Выбор актуального временного промежутка для рассмотрения
data['summary_sales'] = data[['na_sales', 'eu_sales', 'jp_sales', 'other_sales']].sum(axis='columns')
# Удалим игры, вышедшие в один год, но на разных платформах, для более точной статистики
unique_games = data.drop_duplicates(subset=['name', 'year_of_release'])
unique_games.groupby('year_of_release').agg({'name': 'count'}).plot(grid=True,
                                                            ylabel='Проектов выпущено',
                                                            xlabel='Год',
                                                            legend=False,
                                                            figsize=[20, 10])
plt.title('Колличество выпущенных игр в разные периоды времени')
plt.show()
'''
На графике видно постепенное увеличение выпускаемых в год проектов , начиная с 90-х. Примерно в это
время начала активно развиваться IT сфера. Появлялось множество новых платформ, выходили улучшенные версии
старых. Игровая индустрия в принципе активно развивалась, чем и обуславливается столь быстрый рост.
Ближе к 2010 году игры достигли определённой планки, после которой,
 выпускать более масштабные и качественные проекты
стало сложнее и дороже. В целом, возросла требовательность пользователей к играм. 
Поэтому число новых проектов резко пошло на спад.
'''
# Смотрим, как меняются данные по платформам.
# Фильтруем датасет по 5 платформам с самыми большими продажами
top_5_platforms = data.pivot_table(index='platform', values='summary_sales', aggfunc='sum')\
    .sort_values('summary_sales', ascending=False).index[:5].to_list()

# Строим распределние по годам
filtered = data[data['platform'].isin(top_5_platforms)]
filtered.pivot_table(index='year_of_release', columns='platform', aggfunc='size')\
    .plot(grid=True,
          figsize=(20, 10),
          ylabel='Выпущено проектов на данной платформе',
          xlabel='Год')
plt.title('Распределение популярности платформ по годам')
plt.show()
'''
На графике распределния видно, что цикл популярности именно современных платформ составляет около 10 лет.
ПОПУЛЯРНЫЕ платформы, выпущенные в более ранние периоды (до 2000-х) 'живут' немного дольше, порядка 10-12 лет
'''
# Выбираем промежуток с 2014 по 2016 год
new_data = data.loc[(data['year_of_release'] >= 2014) & (data['year_of_release'] <= 2016)]

# Шаг 2
# Проверка гипотез. Во всех случаях будет выбран уровень значимости: α = 0.05
print('\nДля проверки гипотез, будет выбран уровень значимости: α = 0.05')
p_value = 0.05
without_nan = new_data.dropna()

print('\nНулевая гипотеза формируется в соответствии с тезисом, который мы должны проверить.'
      '\nАльтернативная гипотеза формируется в противовес к нулевой, то есть имеет противоположное значение.'
      '\nЭто нужно для того, чтобы подтвердить или опровергнуть нулевую гипотезу, т.е. исходный тезис.'
      '\nДля проверки гипотез был использован критерий о равенстве средних двух генеральных'
      '\nсовокупностей, т.к. в обоих случаях, мы имели дело с двумя большими выборками, взятыми для разных наборов'
      '\nданных из одного временного периода.')

print('\n------------'
      '\n|Гипотеза 1|'
      '\n------------')

# Гипотеза 1
print('\nПроверка гипотезы №1: Среднее число положительных и отрицательных рейтингов у спортивных игр одинаково'
      '\nНулевая гипотеза H0: Среднее число положительных и отрицательных рейтингов у спортивных игр одинаково'
      '\nАльтернативная гипотеза H1: Среднее число положительных и отрицательных рейтингов у спортивных игр разное')

# Пороговое значение: 50 баллов
low_ratings = without_nan['critic_score'].loc[without_nan['critic_score'] <= 50]
high_ratings = without_nan['critic_score'].loc[without_nan['critic_score'] > 50]
result = st.ttest_ind(low_ratings, high_ratings)

print('\np-значение гипотезы №1:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, среднее число положительных и отрицательных рейтингов у спортивных игр одинаково')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, среднее число положительных и отрицательных рейтингов у спортивных игр разное')

print('\n------------'
      '\n|Гипотеза 2|'
      '\n------------')

# Гипотеза 2
print('\nПроверка гипотезы №2: Средние положительные рейтинги игр на платформах PC и PS4 равны'
      '\nНулевая гипотеза H0: Средние положительные рейтинги игр на платформах PC и PS4 равны'
      '\nАльтернативная гипотеза H1:  Средние положительные рейтинги игр на платформамх PC и PS4 разные')


pc_ratings = without_nan['critic_score'].loc[(without_nan['platform'] == 'PC') & (without_nan['critic_score'] > 50)]
ps4_ratings = without_nan['critic_score'].loc[(without_nan['platform'] == 'PS4') & (without_nan['critic_score'] > 50)]
result = st.ttest_ind(pc_ratings, ps4_ratings)

print('\np-значение гипотезы №2:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние положительные рейтинги игр на платформах PC и PS4 равны')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние положительные рейтинги игр на платформах PC и PS4 разные')

print('\n------------'
      '\n|Гипотеза 3|'
      '\n------------')

# Гипотеза 3
print('\nПроверка гипотезы №3: Средние положительные рейтинги игр жанров Strategy и Shooter равны'
      '\nНулевая гипотеза H0: Средние положительные рейтинги игр жанров Strategy и Shooter равны'
      '\nАльтернативная гипотеза H1:  Средние положительные рейтинги игр жанров Strategy и Shooter разные')


strategy_ratings = without_nan['critic_score'].loc[(without_nan['genre'] == 'Shooter') & (without_nan['critic_score'] > 50)]
shooter_ratings = without_nan['critic_score'].loc[(without_nan['genre'] == 'Strategy') & (without_nan['critic_score'] > 50)]
result = st.ttest_ind(strategy_ratings, shooter_ratings)

print('\np-значение гипотезы №3:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние положительные рейтинги игр жанров Strategy и Shooter равны')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние положительные рейтинги игр жанров Strategy и Shooter разные')


