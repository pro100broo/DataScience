import pandas as pd
import scipy.stats as st

from categorize_functions import *

# Шаг1: Подготовка датасета к работе
# Загружаем датасет
not_filtered_data = pd.read_csv('horror_movies.csv', sep=',')
# Выводим общую информацию
not_filtered_data.info()
# Удалим столбцы, содержащие ненужную для нас информацию
data = not_filtered_data.drop(columns=[
    'collection',
    'collection_name',
    'backdrop_path',
    'poster_path',
])
# Выводим общее число пропущенных значений в столбцах
print(data.isna().sum())
# Заполнение пропусков:
data['overview'] = data['overview'].fillna('No overview')
data['tagline'] = data['tagline'].fillna('No tagline')
# Вывод числа явных и неявных дубликатов
print(data.duplicated().sum())
# Удаление аномальных значений (удалим фильмы с нулевой длительностью)
# В целом, можем удалить только до 10% строк от общего объёма датасета
data = data[data['runtime'] > 0]
print(f'\nБыло удалено: {round(100 - (data.shape[0] / not_filtered_data.shape[0]) * 100)}% данных')
# Преобразуем тип данных столбца с датой редиза в тип datetime, для более удобной работы
data['release_date'] = pd.to_datetime(data['release_date'])
# Добавим новый столбец, в котором будет только год выхода фильма
data['year_of_release'] = data['release_date'].dt.year

# Добавим столбцы, в которых будут помечены фильмы по конкретным жанрам
data['Drama'] = data['genre_names'].apply(drama)
data['Comedy'] = data['genre_names'].apply(comedy)
data['Romance'] = data['genre_names'].apply(romance)
data['Adventure'] = data['genre_names'].apply(adventure)
data['Animation'] = data['genre_names'].apply(animation)
data['Thriller'] = data['genre_names'].apply(thriller)

# Выберем определённый период времени, для получения наиболее точной статистики
# Выведем топ-10 лет, в которые было создано больше всего фильмов
grouped_by_year = data.groupby('year_of_release').agg({'id': 'count'}).sort_values('id', ascending=False).head(20)
# Видно, что в период с 2013 по 2022 год вышло наибольшее число фильмов. Этот период и выберем для дальнейшей оценки
print(grouped_by_year)
main_period_data = data[data['year_of_release'] > 2013]

# Шаг2: Анализ данных (проверка гипотез).
# Проведём проверку гипотез, связанных со средним рейтингом фильмов.
# Для более точной оценки, уберём из датасета фильмы с нулевым рейтингом
rating_filtered = main_period_data[main_period_data['vote_average'] > 0]
print('\nДля проверки гипотез, будет выбран уровень значимости: α = 0.05')
p_value = 0.05

print('\nНулевая гипотеза формируется в соответствии с тезисом, который мы должны проверить.'
      '\nАльтернативная гипотеза формируется в противовес к нулевой, то есть имеет противоположное значение.'
      '\nЭто нужно для того, чтобы подтвердить или опровергнуть нулевую гипотезу, т.е. исходный тезис.'
      '\nДля проверки гипотез был использован критерий о равенстве средних двух генеральных'
      '\nсовокупностей, т.к. в обоих случаях, мы имели дело с двумя большими выборками, взятыми для разных наборов'
      '\nданных из одного временного периода.')

print('\n------------'
      '\n|Гипотеза 1|'
      '\n------------')

# Гипотеза 1
print('\nПроверка гипотезы №1: Средние рейтинги жанров: комедия и драма одинаковые'
      '\nНулевая гипотеза H0: Средние рейтинги жанров: комедия и драма одинаковые'
      '\nАльтернативная гипотеза H1: Средние рейтинги жанров: комедия и драма разные')

comedy_ratings = rating_filtered['vote_average'].loc[
    (rating_filtered['Comedy'] == True) &
    (rating_filtered['Drama'] == False)
]
drama_ratings = rating_filtered['vote_average'].loc[
    (rating_filtered['Comedy'] == False) &
    (rating_filtered['Drama'] == True)
]

result = st.ttest_ind(comedy_ratings, drama_ratings)

print('\np-значение гипотезы №1:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, cредние рейтинги жанров: комедия и драма одинаковые')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, cредние рейтинги жанров: комедия и драма разные')

print('\n------------'
      '\n|Гипотеза 2|'
      '\n------------')

# Гипотеза 2
print('\nПроверка гипотезы №2: Средние рейтинги жанров: романтика и приключения одинаковые'
      '\nНулевая гипотеза H0: Средние рейтинги жанров: романтика и приключения одинаковые'
      '\nАльтернативная гипотеза H1: Средние рейтинги жанров: романтика и приключения разные')

romance_ratings = rating_filtered['vote_average'].loc[
    (rating_filtered['Romance'] == True) &
    (rating_filtered['Adventure'] == False)
]
adventure_ratings = rating_filtered['vote_average'].loc[
    (rating_filtered['Romance'] == False) &
    (rating_filtered['Adventure'] == True)
]

result = st.ttest_ind(romance_ratings, adventure_ratings)

print('\np-значение гипотезы №2:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, cредние рейтинги жанров: романтика и приключения одинаковые')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, cредние рейтинги жанров: романтика и приключения разные')

print('\n------------'
      '\n|Гипотеза 3|'
      '\n------------')

# Гипотеза 3
print('\nПроверка гипотезы №3: Средние рейтинги анимированных и не анимированных фильмов равны'
      '\nНулевая гипотеза H0: Средние рейтинги анимированных и не анимированных фильмов равны'
      '\nАльтернативная гипотеза H1: Средние рейтинги анимированных и не анимированных фильмов разные')

animated_ratings = rating_filtered['vote_average'].loc[(rating_filtered['Animation'] == True)]
not_animated_ratings = rating_filtered['vote_average'].loc[(rating_filtered['Animation'] == False)]

result = st.ttest_ind(animated_ratings, not_animated_ratings)

print('\np-значение гипотезы №3:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, cредние рейтинги анимированных и не анимированных фильмов равны')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак,cредние рейтинги анимированных и не анимированных фильмов разные')

print('\n------------'
      '\n|Гипотеза 4|'
      '\n------------')

# Гипотеза 4
print('\nПроверка гипотезы №4: Средние рейтинги триллеров и фильмов с меньшей степенью жестокости равны'
      '\nНулевая гипотеза H0: Средние рейтинги триллеров и фильмов с меньшей степенью жестокости равны'
      '\nАльтернативная гипотеза H1: Средние рейтинги триллеров и фильмов с меньшей степенью жестокости разные')

thriller_ratings = rating_filtered['vote_average'].loc[(rating_filtered['Thriller'] == True)]
not_thriller_ratings = rating_filtered['vote_average'].loc[(rating_filtered['Thriller'] == False)]

result = st.ttest_ind(thriller_ratings, not_thriller_ratings)

print('\np-значение гипотезы №4:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, cредние рейтинги триллеров и фильмов с меньшей степенью жестокости равны')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак,cредние рейтинги триллеров и фильмов с меньшей степенью жестокости разные')


print('\n------------'
      '\n|Гипотеза 5|'
      '\n------------')

# Гипотеза 5
print('\nПроверка гипотезы №5: Средние рейтинги малобюджетных фильмов и фильмов с большим бюджетом равны'
      '\nНулевая гипотеза H0: Средние рейтинги малобюджетных фильмов и фильмов с большим бюджетом равны'
      '\nАльтернативная гипотеза H1: Средние рейтинги малобюджетных фильмов и фильмов с большим бюджетом разные')

# Примем максимум малобюджетных фильмов в 5 млн. длр.
low_budget_ratings = rating_filtered['vote_average'].loc[(rating_filtered['budget'] <= 5000000)]
high_budget_ratings = rating_filtered['vote_average'].loc[(rating_filtered['budget'] > 5000000)]

result = st.ttest_ind(low_budget_ratings, high_budget_ratings)

print('\np-значение гипотезы №5:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние рейтинги малобюджетных фильмов и фильмов с большим бюджетом равны')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние рейтинги малобюджетных фильмов и фильмов с большим бюджетом разные')

print('\n------------'
      '\n|Гипотеза 6|'
      '\n------------')

# Гипотеза 6
print('\nПроверка гипотезы №6: Средние рейтинги короткометражных фильмов и фильмов с большой длительностью равны'
      '\nНулевая гипотеза H0: Средние рейтинги короткометражных фильмов и фильмов с большой длительностью равны'
      '\nАльтернативная гипотеза H1: Средние рейтинги короткометражных фильмов и фильмов с большой длительностью разные')

# Длина короткометражных фильмов не превышает 52 минуты.
short_films_ratings = rating_filtered['vote_average'].loc[(rating_filtered['runtime'] <= 52)]
long_films_rating = rating_filtered['vote_average'].loc[(rating_filtered['runtime'] > 52)]

result = st.ttest_ind(short_films_ratings, long_films_rating)

print('\np-значение гипотезы №6:', result.pvalue)
if result.pvalue > p_value:
    print('\nВидим, что уровень значимости, полученный в результате теста, выше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ПОДТВЕРДИТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние рейтинги короткометражных фильмов и фильмов с большой длительностью равны')
else:
    print('\nВидим, что уровень значимости, полученный в результате теста, меньше заданного'
          '\nСледовательно, мы имеем достаточно оснований, чтобы ОПРОВЕРГНУТЬ НУЛЕВУЮ гипотезу'
          '\nИтак, средние рейтинги короткометражных фильмов и фильмов с большой длительностью разные')



'''
'id', 'original_title', 'title', 'original_language', 'overview',
       'tagline', 'release_date', 'popularity', 'vote_count',
       'vote_average', 'budget', 'revenue', 'runtime', 'status', 'adult',
       'genre_names'
'''
# ['Horror', 'Thriller', 'Adventure', 'Drama', 'Mystery', 'Science Fiction', 'Action', 'Crime', 'War', 'Music',
# 'Comedy', 'Fantasy', 'Animation', 'Family', 'Documentary', 'Romance', 'TV Movie', 'History', 'Western']

# Drama vs Comedy
# Romance vs Adventure
# Animation vs no Animation
# Thriller vs no Thriller
# low budget vs hight budget
# low runtime vs hight runtime